// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BupaCodingChallengeSpecflow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BookListFeature : object, Xunit.IClassFixture<BookListFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BookList.feature"
#line hidden
        
        public BookListFeature(BookListFeature.FixtureData fixtureData, BupaCodingChallengeSpecflow_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "BookList", "Fetch and process a list of book owners and their books to categorise into age ca" +
                    "tegories and book types.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Retrieve books and return child and adult categories based on age")]
        [Xunit.TraitAttribute("FeatureTitle", "BookList")]
        [Xunit.TraitAttribute("Description", "Retrieve books and return child and adult categories based on age")]
        [Xunit.TraitAttribute("Category", "tag1")]
        public void RetrieveBooksAndReturnChildAndAdultCategoriesBasedOnAge()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve books and return child and adult categories based on age", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the book service has the following books", @"[
  {
    ""name"": ""Micheal Scott"",
    ""age"": 40,
    ""books"": [
      {
        ""name"": ""Somehow I Manage"",
        ""type"": ""Paperback""
      },
      {
        ""name"": ""Beet Farming Guide"",
        ""type"": ""Hardcover""
      }
    ]
  },
  {
    ""name"": ""Cecilia"",
    ""age"": 14,
    ""books"": [
      {
        ""name"": ""Alphabets"",
        ""type"": ""Hardcover""
      }
    ]
  }
]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
 testRunner.When("I request the categorised books list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Category",
                            "Books"});
                table1.AddRow(new string[] {
                            "child",
                            "[\"Alphabets\"]"});
                table1.AddRow(new string[] {
                            "adult",
                            "[\"Beet Farming Guide\", \"Somehow I Manage\"]"});
#line 38
 testRunner.Then("I should recieve the following", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Retrieve hardcover books and return child and adult categories based on age")]
        [Xunit.TraitAttribute("FeatureTitle", "BookList")]
        [Xunit.TraitAttribute("Description", "Retrieve hardcover books and return child and adult categories based on age")]
        public void RetrieveHardcoverBooksAndReturnChildAndAdultCategoriesBasedOnAge()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve hardcover books and return child and adult categories based on age", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
 testRunner.Given("the book service has the following books", @"[
  {
    ""name"": ""Micheal Scott"",
    ""age"": 40,
    ""books"": [
      {
        ""name"": ""Somehow I Manage"",
        ""type"": ""Paperback""
      },
      {
        ""name"": ""Beet Farming Guide"",
        ""type"": ""Hardcover""
      }
    ]
  },
  {
    ""name"": ""Cecilia"",
    ""age"": 14,
    ""books"": [
      {
        ""name"": ""Alphabets"",
        ""type"": ""Hardcover""
      }
    ]
  }
]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
 testRunner.When("I request the categorised books list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Category",
                            "Books"});
                table2.AddRow(new string[] {
                            "child",
                            "[\"Alphabets\"]"});
                table2.AddRow(new string[] {
                            "adult",
                            "[\"Beet Farming Guide\"]"});
#line 74
 testRunner.Then("I should recieve the following", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BookListFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BookListFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
